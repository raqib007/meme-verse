{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "MemeVerse",
        "description": "https://meme-verse-2021.herokuapp.com",
        "termsOfService": "http://swagger.io/terms/",
        "license": {
            "name": "Md. Raqib Hasan",
            "url": "https://meme-verse-2021.herokuapp.com"
        }
    },
    "basePath": "/api",
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/signin/": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Sign in function",
                "description": "Endpoint to signin.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "User Parameters",
                        "in": "body",
                        "description": "User to add to the database",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/singin"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/response"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access Denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/400error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/400error"
                        }
                    },
                    "500": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/400error"
                        }
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get all user",
                "description": "Endpoint to create new user.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/users"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access Denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/400error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/400error"
                        }
                    },
                    "500": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/400error"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Create new category",
                "description": "Endpoint to create category.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "User Parameters",
                        "in": "body",
                        "description": "User to add to the database",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/response"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access Denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/400error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/400error"
                        }
                    },
                    "500": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/400error"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Primary key of users table",
                    "type": "string"
                }
            ],
            "get": {
                "summary": "Get user deatils with given userId",
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update User",
                "tags": [
                    "User"
                ],
                "parameters": [
                    {
                        "name": "User",
                        "in": "body",
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/users"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category is updated",
                        "schema": {
                            "$ref": "#/definitions/users"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete user with given id",
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "User is deleted"
                    },
                    "404": {
                        "description": "id not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users/{id}/follow-user": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Primary key of user table",
                    "type": "string"
                }
            ],
            "post": {
                "summary": "Follow user",
                "tags": ["User"],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful"
                    }
                }
            }
        },
        "/users/{id}/unfollow-user": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "Primary key of user table",
                    "type": "string"
                }
            ],
            "post": {
                "summary": "Follow user",
                "tags": ["User"],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful"
                    }
                }
            }
        },
        "/category/": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Get all category",
                "description": "Endpoint to create new user.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/response"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access Denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/400error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/400error"
                        }
                    },
                    "500": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/400error"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Category"
                ],
                "summary": "Create new category",
                "description": "Endpoint to create category.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Category Parameters",
                        "in": "body",
                        "description": "Category to add to the database",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/category"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/response"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access Denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/400error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/400error"
                        }
                    },
                    "500": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/400error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete all category",
                "tags": [
                    "Category"
                ],
                "responses": {
                    "200": {
                        "description": "Category is deleted"
                    },
                    "404": {
                        "description": "id not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/category/{categoryId}": {
            "parameters": [
                {
                    "name": "categoryId",
                    "in": "path",
                    "required": true,
                    "description": "Primary key of category table",
                    "type": "string"
                }
            ],
            "get": {
                "summary": "Get category deatils with given categoryId",
                "tags": [
                    "Category"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/category"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update category",
                "tags": [
                    "Category"
                ],
                "parameters": [
                    {
                        "name": "Category",
                        "in": "body",
                        "description": "Category details",
                        "schema": {
                            "$ref": "#/definitions/category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category is updated",
                        "schema": {
                            "$ref": "#/definitions/category"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete category with given categoryId",
                "tags": [
                    "Category"
                ],
                "responses": {
                    "200": {
                        "description": "Category is deleted"
                    },
                    "404": {
                        "description": "id not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/meme/{category}": {
            "parameters": [
                {
                    "name": "category",
                    "in": "path",
                    "required": true,
                    "description": "type 'all' to get all data or enter category id to retrieve data based on category ",
                    "type": "string"
                }
            ],
            "get": {
                "summary": "Get meme deatils with given category",
                "tags": [
                    "Meme Post"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/meme/{meme_id}": {
            "parameters": [
                {
                    "name": "meme_id",
                    "in": "path",
                    "required": true,
                    "description": "Primary key of meme table",
                    "type": "string"
                }
            ],
            "put": {
                "summary": "Update meme",
                "tags": [
                    "Meme Post"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "meme",
                        "in": "body",
                        "description": "meme details",
                        "schema": {
                            "$ref": "#/definitions/meme"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Meme is updated",
                        "schema": {
                            "$ref": "#/definitions/response"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete meme with given meme_id",
                "tags": [
                    "Meme Post"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Meme is deleted"
                    },
                    "404": {
                        "description": "id not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/meme/getById/{meme_id}": {
            "parameters": [
                {
                    "name": "meme_id",
                    "in": "path",
                    "required": true,
                    "description": "Primary key of meme table",
                    "type": "string"
                }
            ],
            "get": {
                "summary": "Get meme deatils with given meme_id",
                "tags": [
                    "Meme Post"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response"
                        }
                    }
                }
            }
        },
        "/meme/like/{meme_id}": {
            "parameters": [
                {
                    "name": "meme_id",
                    "in": "path",
                    "required": true,
                    "description": "Primary key of meme table",
                    "type": "string"
                }
            ],
            "put": {
                "summary": "Like meme",
                "tags": [
                    "Meme Like"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Meme is updated",
                        "schema": {
                            "$ref": "#/definitions/response"
                        }
                    }
                }
            }
        },
        "/meme/removelike/{meme_id}": {
            "parameters": [
                {
                    "name": "meme_id",
                    "in": "path",
                    "required": true,
                    "description": "Primary key of meme table",
                    "type": "string"
                }
            ],
            "put": {
                "summary": "Remove Like meme",
                "tags": [
                    "Meme Like"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Meme is updated",
                        "schema": {
                            "$ref": "#/definitions/response"
                        }
                    }
                }
            }
        },
        "/meme/unlike/{meme_id}": {
            "parameters": [
                {
                    "name": "meme_id",
                    "in": "path",
                    "required": true,
                    "description": "Primary key of meme table",
                    "type": "string"
                }
            ],
            "put": {
                "summary": "Dislike meme",
                "tags": [
                    "Meme Dislike"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Meme is updated",
                        "schema": {
                            "$ref": "#/definitions/response"
                        }
                    }
                }
            }
        },
        "/meme/removeunlike/{meme_id}": {
            "parameters": [
                {
                    "name": "meme_id",
                    "in": "path",
                    "required": true,
                    "description": "Primary key of meme table",
                    "type": "string"
                }
            ],
            "put": {
                "summary": "Remove Dislike meme",
                "tags": [
                    "Meme Dislike"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Meme is updated",
                        "schema": {
                            "$ref": "#/definitions/response"
                        }
                    }
                }
            }
        },
        "/comment/": {
            "post": {
                "tags": [
                    "Comment"
                ],
                "summary": "Create new comment",
                "description": "Endpoint to create comment.",
                "produces": [
                    "application/json"
                ],
                "consumes": [
                    "application/json"
                ],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "Comment Parameters",
                        "in": "body",
                        "description": "Comment to add to the database",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/comment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/response"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Access Denied",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/400error"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/400error"
                        }
                    }
                }
            }
        },
        "/comment/{comment_id}": {
            "parameters": [
                {
                    "name": "comment_id",
                    "in": "path",
                    "required": true,
                    "description": "Primary key of comment table",
                    "type": "string"
                }
            ],
            "get": {
                "summary": "Get comment deatils with given comment_id",
                "tags": [
                    "Comment"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "put": {
                "summary": "Update Comment",
                "tags": [
                    "Comment"
                ],
                "parameters": [
                    {
                        "name": "Comment",
                        "in": "body",
                        "description": "Comment details",
                        "schema": {
                            "$ref": "#/definitions/comment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment is updated"
                    }
                }
            },
            "delete": {
                "summary": "Delete Comment with given comment_id",
                "tags": [
                    "Comment"
                ],
                "responses": {
                    "200": {
                        "description": "Comment is deleted"
                    },
                    "404": {
                        "description": "id not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        }
    },
    "definitions": {
        "singin": {
            "properties": {
                "email": {
                    "required": true,
                    "type": "string",
                    "example": "raqib@gmail.com"
                },
                "password": {
                    "required": true,
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "users": {
            "properties": {
                "first_name": {
                    "required": true,
                    "type": "string"
                },
                "last_name": {
                    "required": true,
                    "type": "string"
                },
                "email": {
                    "required": true,
                    "type": "string"
                },
                "password": {
                    "required": true,
                    "type": "string"
                }
            }
        },
        "category": {
            "properties": {
                "name": {
                    "required": true,
                    "type": "string"
                }
            }
        },
        "meme": {
            "properties": {
                "description": {
                    "required": true,
                    "type": "string"
                },
                "category": {
                    "required": true,
                    "type": "string"
                },
                "image_public_id": {
                    "required": true,
                    "type": "string"
                },
                "image_url": {
                    "required": true,
                    "type": "string"
                },
                "likes": {
                    "type" : "array",
                    "items": {
                        "properties" : {
                            "user_id": {
                                "required":true,
                                "type": "string"
                            }
                        }
                    }
                },
                "unlikes": {
                    "type" : "array",
                    "items": {
                        "properties" : {
                            "user_id": {
                                "required":true,
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "comment": {
            "properties": {
                "parent_id": {
                    "required": true,
                    "type": "string"
                },
                "user_id": {
                    "required": true,
                    "type": "string"
                },
                "meme_id": {
                    "required": true,
                    "type": "string"
                },
                "comment": {
                    "required": true,
                    "type": "string"
                },
                "deleted": {
                    "required": true,
                    "type": "boolean"
                }
            }
        },
        "response": {
            "properties": {
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "httpStatusCode": {
                    "type": "integer"
                },
                "message": {
                    "type": "string",
                    "example": "400 Bad Request"
                }
            }
        },
        "400error": {
            "properties": {
                "message": {
                    "type": "string",
                    "example": "400 Bad Request"
                }
            }
        },
        "500error": {
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal Server Error"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "x-access-token",
            "in": "header"
        },
        "api_key": {
            "type": "apiKey",
            "name": "secret_key",
            "in": "header"
        }
    }
}